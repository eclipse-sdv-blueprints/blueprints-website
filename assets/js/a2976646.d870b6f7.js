"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[22],{5788:(e,t,a)=>{a.d(t,{Iu:()=>s,yg:()=>h});var n=a(1504);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(h,r(r({ref:t},s),{},{components:a})):n.createElement(h,r({ref:t},s))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:i,r[1]=p;for(var c=2;c<o;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8248:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=a(5072),i=(a(1504),a(5788));const o={},r="Companion Application Blueprint",p={unversionedId:"companion-application/Readme",id:"companion-application/Readme",title:"Companion Application Blueprint",description:"The companion application is an example to",source:"@site/docs/companion-application/Readme.md",sourceDirName:"companion-application",slug:"/companion-application/",permalink:"/docs/companion-application/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"overallSidebar",previous:{title:"Blueprints Documentation",permalink:"/docs/overview"},next:{title:"Architecture of Companion Application",permalink:"/docs/companion-application/architecture-seat-adjuster"}},l={},c=[{value:"Description",id:"description",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...o}=e;return(0,i.yg)(u,(0,n.c)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"companion-application-blueprint"},"Companion Application Blueprint"),(0,i.yg)("p",null,"The ",(0,i.yg)("strong",{parentName:"p"},"companion application")," is an example to\nshowcase how to create a vehicle application which senses and actuates signals in the vehicle\nfor Eclipse Leda with the help of Eclipse Velocitas and Eclipse Kuksa\n. The aim is not to build the best available application possible but to show how one can use the applied technologies\nto build a companion application for the interaction with a vehicle, e.g., to move a seat.\nIf you are new to the concepts around Eclipse SDV and the mentioned projects\nwe recommend to read the ",(0,i.yg)("a",{parentName:"p",href:"https://eclipse-leda.github.io/leda/docs/general-usage/sdv-introduction/"},"SDV Tutorial")," first."),(0,i.yg)("h2",{id:"description"},"Description"),(0,i.yg)("p",null,"The idea of the specific companion application introduced in this blueprint is to move the driver seat to positions defined\nin a driver profile hosted by a third-party web service."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Leda Seat Adjuster Use Case",src:a(220).c,width:"521",height:"215"})),(0,i.yg)("p",null,"The setup contains the following components:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cloud or mobile trigger: not part of the Leda image, but we simulate it by issuing MQTT messages"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Seat Adjuster")," : Developed with Eclipse Velocitas to be deployed by user"),(0,i.yg)("li",{parentName:"ul"},"Eclipse Kuksa.val - ",(0,i.yg)("strong",{parentName:"li"},"KUKSA Databroker")," (pre-installed with Eclipse Leda)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Mock Service"),": Example provider for Eclipse Kuksa.VAL which mocks the behavior of the vehicle.")),(0,i.yg)("p",null,"In the following pages, we first introduce the ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/architecture-seat-adjuster"},"architecture and the assumed data flow")," in more detail."),(0,i.yg)("p",null,"We then show how to realize the introduced architecture with Eclipse Velocitas and Eclipse Leda 0.1.0-M2. On a high level, you will perform the following steps and we describe each step in more detail in this guide. So simply ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/architecture-seat-adjuster"},"continue reading"),":"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/develop-seat-adjuster#setup-eclipse-velocitas-from-template-repository"},"Setup the Eclipse Velocitas template repository")," to develop, build and deploy your\nversion of the seat adjuster example in a VSCode DevContainer.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/deploy-seat-adjuster"},"Run Eclipse Leda"),", for example, as container or with other options like QEMU, physical hardware, etc.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/deploy-seat-adjuster"},"Manage the Eclipse Kanto container runtime")," in Eclipse Leda to deploy your seat adjuster application.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/interact-seat-adjuster"},"Test the deployed setup")," in Eclipse Leda by interacting with the seat adjuster over MQTT to change the seat position."))),(0,i.yg)("p",null,"If you run into any issues while following this guide, you can check the ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/troubleshooting"},"troubleshooting page")," for possible hints."))}d.isMDXComponent=!0},220:(e,t,a)=>{a.d(t,{c:()=>n});const n=a.p+"assets/images/seatadjuster-aaf2722e2d932ad88d9ea01346379865.png"}}]);