"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[222],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,u=d["".concat(c,".").concat(h)]||d[h]||m[h]||i;return n?a.createElement(u,r(r({ref:t},l),{},{components:n})):a.createElement(u,r({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={},r="Deploy Application",s={unversionedId:"companion-application/deploy-seat-adjuster",id:"companion-application/deploy-seat-adjuster",title:"Deploy Application",description:"We now want to deploy the application to a target device.",source:"@site/docs/companion-application/deploy-seat-adjuster.md",sourceDirName:"companion-application",slug:"/companion-application/deploy-seat-adjuster",permalink:"/docs/companion-application/deploy-seat-adjuster",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"overallSidebar",previous:{title:"Develop Application",permalink:"/docs/companion-application/develop-seat-adjuster"},next:{title:"Interact with Seat Adjuster",permalink:"/docs/companion-application/interact-seat-adjuster"}},c={},p=[{value:"Disable other containers",id:"disable-other-containers",level:2},{value:"Starting of container",id:"starting-of-container",level:2},{value:"Use <code>kanto-cm</code>",id:"use-kanto-cm",level:3},{value:"Add manifest for seat adjuster",id:"add-manifest-for-seat-adjuster",level:3},{value:"Mock Service",id:"mock-service",level:2},{value:"seat-application.json",id:"seat-applicationjson",level:2},{value:"mock.py",id:"mockpy",level:2},{value:"mockservice.json",id:"mockservicejson",level:2}],l={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deploy-application"},"Deploy Application"),(0,o.kt)("p",null,"We now want to deploy the application to a target device.\nYou may follow the remainder of this guide on a separate device like a RaspberryPi, but you can emulate such a device on your development machine too.\nEither way, we use Eclipse Leda in version 0.1.0-M2 as the target system, which is a Linux-based distribution with pre-installed SDV components like the KUKSA Databroker\nand Eclipse Kanto for container management.\nFor more details on how to download and run Eclipse Leda, follow the respective guides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://eclipse-leda.github.io/leda/docs/general-usage/running-qemu/"},"QEMU")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://eclipse-leda.github.io/leda/docs/general-usage/docker-setup/"},"Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://eclipse-leda.github.io/leda/docs/general-usage/raspberry-pi/"},"RaspberryPi")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://eclipse-leda.github.io/leda/docs/general-usage/linux-setup/"},"Linux"))),(0,o.kt)("p",null,"We recommend to get started with the QEMU setup.\nIn any case, you now need to configure Eclipse Kanto to execute the application.\nFor this, it helps to get an overview of which containers are currently running in Eclipse Kanto. You can get this through the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kantui\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kanto-cm list\n")),(0,o.kt)("p",null,"From this list, ensure that at least the KUKSA Databroker runs, which should be the case since it is are pre-configured\nwith the Eclipse Leda release."),(0,o.kt)("p",null,"In Eclipse Kanto, you can manage a container with the command line application ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-cm")," or container manifest files describing a desired container execution.\nThe advantage of using the container manifests is that the configuration is persisted across a reboot of the system and is easier to use\nto describe a desired software state for the overall vehicle."),(0,o.kt)("p",null,"Eclipse Leda has the ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-auto-deployer")," systemd service, which applies any changes to the manifests in ",(0,o.kt)("inlineCode",{parentName:"p"},"/data/var/containers/manifests")," to Eclipse Kanto.\nThus, the typical way to add or adapt containers is to modify the corresponding container manifest."),(0,o.kt)("h2",{id:"disable-other-containers"},"Disable other containers"),(0,o.kt)("p",null,"The release 0.1.0-M2 of Eclipse Leda comes with a number of pre-configured and automatically executed containers.\nOne of these containers is the ",(0,o.kt)("inlineCode",{parentName:"p"},"feedercan")," that feeds changing values from a recording for signals such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle.Speed")," to the KUKSA Databroker.\nThese values interfere with the seat adjuster application, which only moves the seat if the vehicle speed is zero.\nAnother interfering container is the ",(0,o.kt)("inlineCode",{parentName:"p"},"seatservice-example")," which reacts to changes in the signal ",(0,o.kt)("inlineCode",{parentName:"p"},"Vehicle.Cabin.Seat.Row1.Pos1.Position"),"\nand which we replace later with the ",(0,o.kt)("inlineCode",{parentName:"p"},"mock service"),"."),(0,o.kt)("p",null,"Therefore, we need to stop the ",(0,o.kt)("inlineCode",{parentName:"p"},"feedercan")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"seatservice-example")," container.\nThis is possible in ",(0,o.kt)("inlineCode",{parentName:"p"},"kantui")," by selecting the respective entry and pressing ",(0,o.kt)("inlineCode",{parentName:"p"},"R"),".\nIn addition, you need to remove the corresponding container manifests in ",(0,o.kt)("inlineCode",{parentName:"p"},"/data/var/containers/manifests")," to avoid that the Eclipse Kanto\nauto-deployer re-deploys these containers. Another approach is to change the ending of the not-needed manifests to something other than ",(0,o.kt)("inlineCode",{parentName:"p"},".json"),"."),(0,o.kt)("p",null,"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"feedercan")," container still runs, the seat adjuster application app will later respond with the following error message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'seatadjuster/setPosition/response\n {"requestId": "12345", "result": {"status": 1, "message": "Not allowed to move seat because vehicle speed is 9.0 and not 0"}}\n')),(0,o.kt)("p",null,"Since they consume resources and are not needed for the seat adjustment, you may remove the containers and manifests for ",(0,o.kt)("inlineCode",{parentName:"p"},"cloudconnector"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"hvacservice-example"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"sua"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"vum")," as well."),(0,o.kt)("h2",{id:"starting-of-container"},"Starting of container"),(0,o.kt)("h3",{id:"use-kanto-cm"},"Use ",(0,o.kt)("inlineCode",{parentName:"h3"},"kanto-cm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kanto-cm create \\\n    --name seatadjuster-app \\\n    --e="SDV_SEATSERVICE_ADDRESS=grpc://seatservice-example:50051" \\\n    --e="SDV_MQTT_ADDRESS=mqtt://mosquitto:1883" \\\n    --e="SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555" \\\n    --e="SDV_MIDDLEWARE_TYPE=native" \\\n    --hosts="databroker:container_databroker-host, mosquitto:host_ip, seatservice-example:container_seatservice-example-host" \\\n    ghcr.io/<YOUR_ORG>/seat-adjuster-app:latest\n\nkanto-cm start --name seatadjuster-app\nkanto-cm logs --name seatadjuster-app\n')),(0,o.kt)("h3",{id:"add-manifest-for-seat-adjuster"},"Add manifest for seat adjuster"),(0,o.kt)("p",null,"As an alternative to using ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-cm"),", you can add a container manifest to the directoy watched by the ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-auto-deployer")," (",(0,o.kt)("inlineCode",{parentName:"p"},"data/var/containers/manifests"),")."),(0,o.kt)("p",null,"To add the container manifest, create a new file inside this folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"touch seat-adjuster.json\nnano seat-adjuster.json\n")),(0,o.kt)("p",null,"and copy the ",(0,o.kt)("a",{parentName:"p",href:"#seat-applicationjson"},"manifest from below"),". You can save the file with ",(0,o.kt)("inlineCode",{parentName:"p"},"strg+s")," and close the window with ",(0,o.kt)("inlineCode",{parentName:"p"},"strg+q"),".\nYou can create the file on the development machine and copy it via scp too:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"scp -P 2222 myapp.json root@localhost:/data/var/containers/manifests/")),(0,o.kt)("p",null,"The example deployment descriptor below is available in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-leda/meta-leda/blob/main/meta-leda-components/recipes-sdv/eclipse-leda/kanto-containers/example/seatadjuster-app.json.disabled"},"meta-leda-components"),"\ntoo.\nAn interesting aspect of the snippet is the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.env")," section at the bottom of the container manifest.\nThere, we define a number of environment variables for the container\nwhich configures the Eclipse Velocitas SDK to use the native middleware and where to find the MQTT-broker and the KUKSA Databroker to use.\nWe did the same in ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-cm")," call behind the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"--e="),"."),(0,o.kt)("p",null,"More details on the general deployment approach can be found in ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-leda.github.io/leda/docs/app-deployment/velocitas/"},"Leda Vehicle Applications")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If the GitHub packages in which you stored the container image are private, Eclipse Kanto needs a valid access token to download the container image.\nYou can create a personal access token in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Developer Settings")," of your GitHub account. Select ",(0,o.kt)("inlineCode",{parentName:"p"},"Personal access token")," -> ",(0,o.kt)("inlineCode",{parentName:"p"},"Tokens (classic)"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"generate a new token")," that at least has the ",(0,o.kt)("inlineCode",{parentName:"p"},"read:packages")," permission. Copy the generated token to a secure location or to Eclipse Kanto\nbecause GitHub will not show it again.\nYou can now configure Eclipse Kanto in Eclipse Leda to use the token by executing:\n",(0,o.kt)("inlineCode",{parentName:"p"},"sdv-kanto-ctl add-registry -h <registryhostname> -u <your_username> -p <your_password>"),". In the case of GitHub, the ",(0,o.kt)("inlineCode",{parentName:"p"},"registryhostname")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"ghcr.io"),"\n, the username is your GitHub handle, and the password is the generated token.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-leda.github.io/leda/docs/device-provisioning/container-management/container-registries/"},"the Eclipse Leda documentation on Container Registries")," for more details.")),(0,o.kt)("p",null,"To make sure that Eclipse Kanto detects the changes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"manifests")," folder, you can restart the respective system services:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl restart kanto-auto-deployer\n")),(0,o.kt)("h2",{id:"mock-service"},"Mock Service"),(0,o.kt)("p",null,"As explained in the description of the code, the seat adjuster application sets the target value for the seat positions in the KUSKSA Datbroker\nand waits for the current position to update."),(0,o.kt)("p",null,"For this to function, there needs to be a component that reacts to this change by moving the seat and updating the current value accordingly.\nBecause we cannot assume that you have an actual ECU availabe for running this guide, we mock the vehicle behavior\nwith the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse/kuksa.val.services/tree/main/mock_service"},"vehicle mock service")," from the Eclipse Kuksa project."),(0,o.kt)("p",null,"The mock service allows the definition of custom interaction sequences with the KUKSA Databroker. For instance, one can react to changes to specific signals\nor update signals with a time trigger. You can define the sequences in a Python file like the example ",(0,o.kt)("a",{parentName:"p",href:"#mockpy"},(0,o.kt)("inlineCode",{parentName:"a"},"mock.py"))," below.\nThe snippet shows how to use a change to the target value for the seat position signal as a trigger to update the current value to the target value step-wise\nover a duration of 10 seconds."),(0,o.kt)("p",null,"For the deployment, you create another container manifest in ",(0,o.kt)("inlineCode",{parentName:"p"},"/data/var/containers/manifest")," with the content from ",(0,o.kt)("a",{parentName:"p",href:"#mockservicejson"},"below"),".\nThe container manifest also mounts a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"mock.py")," into the container to replace the configuration of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse/kuksa.val.services/blob/main/mock_service/mock.py"},"default mock.py"),".\nWith the container manifest below, Eclipse Kanto instead mounts from ",(0,o.kt)("inlineCode",{parentName:"p"},"/data/var/mock/mock.py"),".\nTherefore, you need to create this directory and the file with the content from below."),(0,o.kt)("p",null,"You may now check with ",(0,o.kt)("inlineCode",{parentName:"p"},"kantui")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"kanto-cm list")," whether all components (",(0,o.kt)("inlineCode",{parentName:"p"},"databroker"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"seatadjuster-app"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"mock-service"),") are running well.\nThe next step is to ",(0,o.kt)("a",{parentName:"p",href:"/docs/companion-application/interact-seat-adjuster"},"interact with the seat adjuster"),"."),(0,o.kt)("h2",{id:"seat-applicationjson"},"seat-application.json"),(0,o.kt)("p",null,"This is the Eclipse Kanto container manifest for the seat adjuster application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "container_id": "seatadjuster-app",\n    "container_name": "seatadjuster-app",\n    "image": {\n        "name": "ghcr.io/<identifier-for-container>:<tag-for-container>"\n    },\n    "host_config": {\n        "devices": [],\n        "network_mode": "bridge",\n        "privileged": false,\n        "restart_policy": {\n            "maximum_retry_count": 0,\n            "retry_timeout": 0,\n            "type": "unless-stopped"\n        },\n        "runtime": "io.containerd.runc.v2",\n        "extra_hosts": [        \n                "mosquitto:host_ip",\n                "databroker:container_databroker-host",\n                "seatservice-example:container_seatservice-example-host"\n        ],\n        "port_mappings": [\n            {\n              "protocol": "tcp",\n              "container_port": 30151,\n              "host_ip": "localhost",\n              "host_port": 50151,\n              "host_port_end": 50151\n            }\n        ],\n        "log_config": {\n            "driver_config": {\n                "type": "json-file",\n                "max_files": 2,\n                "max_size": "1M",\n                "root_dir": ""\n            },\n            "mode_config": {\n                "mode": "blocking",\n                "max_buffer_size": ""\n            }\n        },\n        "resources": null\n    },\n    "config": {\n        "env": [\n           "SDV_SEATSERVICE_ADDRESS=grpc://seatservice-example:50051",\n           "SDV_VEHICLEDATABROKER_ADDRESS=grpc://databroker:55555",\n           "SDV_MQTT_ADDRESS=mqtt://mosquitto:1883",\n           "SDV_MIDDLEWARE_TYPE=native",\n           "RUST_LOG=info",\n           "vehicle_data_broker=info"\n        ],\n        "cmd": []\n    }\n}\n')),(0,o.kt)("h2",{id:"mockpy"},"mock.py"),(0,o.kt)("p",null,"This is the example ",(0,o.kt)("inlineCode",{parentName:"p"},"mock.py")," for mocking a seat provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from lib.animator import RepeatMode\nfrom lib.dsl import (\n    create_animation_action,\n    create_behavior,\n    create_event_trigger,\n    create_set_action,\n    get_datapoint_value,\n    mock_datapoint,\n)\n\nfrom lib.trigger import ClockTrigger, EventType\n\nmock_datapoint(\n    path="Vehicle.Cabin.Seat.Row1.Pos1.Position",\n    initial_value=0,\n    behaviors=[\n        create_behavior(\n            trigger=create_event_trigger(EventType.ACTUATOR_TARGET),\n            action=create_animation_action(\n                duration=10.0,\n                values=["$self", "$event.value"],\n            ),\n        )\n    ],\n)\n\n')),(0,o.kt)("h2",{id:"mockservicejson"},"mockservice.json"),(0,o.kt)("p",null,"The container manifest for the mockservice may look like the following snippet. Note, that the files referenced in the ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"mount_points"),"\nneeds to be present in the file system of your Eclipse Leda instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "container_id": "mockservice",\n    "container_name": "mockservice",\n    "image": {\n        "name": "ghcr.io/eclipse/kuksa.val.services/mock_service:latest"\n    },\n    "mount_points": [\n        {\n            "source": "/data/var/mock/mock.py",\n            "destination": "/mock.py",\n            "propagation_mode": "rprivate"\n        }\n    ],\n    "host_config": {\n        "network_mode": "bridge",\n        "privileged": false,\n        "restart_policy": {\n            "maximum_retry_count": 0,\n            "retry_timeout": 0,\n            "type": "unless-stopped"\n        },\n        "runtime": "io.containerd.runc.v2",\n        "extra_hosts": [\n            "databroker:container_databroker-host"\n        ],\n        "log_config": {\n            "driver_config": {\n                "type": "json-file",\n                "max_files": 2,\n                "max_size": "1M",\n                "root_dir": ""\n            },\n            "mode_config": {\n                "mode": "blocking",\n                "max_buffer_size": ""\n            }\n        }\n    },\n    "config": {\n        "env": [\n           "VDB_ADDRESS=databroker:55555"\n        ]\n    }\n}\n')))}m.isMDXComponent=!0}}]);