"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[240],{5788:(e,t,n)=>{n.d(t,{Iu:()=>c,yg:()=>m});var a=n(1504);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=i,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5392:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(5072),i=(n(1504),n(5788));const o={},r="Develop Application",l={unversionedId:"companion-application/develop-seat-adjuster",id:"companion-application/develop-seat-adjuster",title:"Develop Application",description:"After we established the architecture of what we want to build, it is time to develop the application with the help of the Eclipse Velocitas DevContainer and templates.",source:"@site/docs/companion-application/develop-seat-adjuster.md",sourceDirName:"companion-application",slug:"/companion-application/develop-seat-adjuster",permalink:"/docs/companion-application/develop-seat-adjuster",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"overallSidebar",previous:{title:"Architecture of Companion Application",permalink:"/docs/companion-application/architecture-seat-adjuster"},next:{title:"Deploy Application",permalink:"/docs/companion-application/deploy-seat-adjuster"}},s={},p=[{value:"Setup Eclipse Velocitas from template repository",id:"setup-eclipse-velocitas-from-template-repository",level:2},{value:"Execute Development Container in VSCode",id:"execute-development-container-in-vscode",level:2},{value:"Develop the application",id:"develop-the-application",level:2},{value:"Start Runtime in DevContainer to test application",id:"start-runtime-in-devcontainer-to-test-application",level:2},{value:"Kanto Runtime",id:"kanto-runtime",level:3},{value:"Commit and Release Application",id:"commit-and-release-application",level:2}],c={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(h,(0,a.c)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"develop-application"},"Develop Application"),(0,i.yg)("p",null,"After we established ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/architecture-seat-adjuster"},"the architecture")," of what we want to build, it is time to develop the application with the help of the Eclipse Velocitas DevContainer and templates."),(0,i.yg)("h2",{id:"setup-eclipse-velocitas-from-template-repository"},"Setup Eclipse Velocitas from template repository"),(0,i.yg)("p",null,"We use Eclipse Velocitas to develop the seat application against the API of the Kuksa.val Databroker:"),(0,i.yg)("p",null,"In the first step, you create a copy of the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-python-template/tree/main"},"Eclipse Velocitas template repository"),".\nYou create the copy by opening the repository in GitHub and selecting:  ",(0,i.yg)("inlineCode",{parentName:"p"},"Use this template")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Create a new repository"),".\nIn the next step, you choose under which organization to place the created repository and whether it should be public.\nIf you set the repository to private, you have to perform additional configuration steps mentioned below."),(0,i.yg)("p",null,"The template repository ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-python-template/tree/main/app"},"contains skeleton code for the application"),",\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-python-template/tree/main/.github/workflows"},"test and release workflows for GitHub actions"),",\nand the configuration of a ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-python-template/tree/main/.devcontainer"},"development environment in a container"),"."),(0,i.yg)("p",null,"In addition to the Python template used in this guide, there is a ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-cpp-template"},"C++ template")," available."),(0,i.yg)("h2",{id:"execute-development-container-in-vscode"},"Execute Development Container in VSCode"),(0,i.yg)("p",null,"You then checkout the repository on your development machine and open it in VSCode. From VSCode\nyou can execute the development container (DevContainer) configured in the repository.\nFor this to function, you need to install the following tools on your computer:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/#desktop"},"Docker Engine")," (e.g. through ",(0,i.yg)("a",{parentName:"li",href:"https://www.docker.com"},"Docker Desktop")," or ",(0,i.yg)("a",{parentName:"li",href:"https://rancherdesktop.io"},"Rancher Desktop"),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://code.visualstudio.com"},"VSCode")," with the\n",(0,i.yg)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"},"Dev Containers")," plugin installed.")),(0,i.yg)("p",null,"In the best case, VSCode may detect that the repository contains a DevContainer configuration and ask you whether to execute it.\nAlternatively, you can press ",(0,i.yg)("inlineCode",{parentName:"p"},"F1")," in VSCode and then enter ",(0,i.yg)("inlineCode",{parentName:"p"},"DevContainers: Reopen in container")," to start the DevContainer.\nIn either case, VSCode should reopen and then connect to the DevContainer.\nBecause of the DevContainer, we do not need to make further modifications to the developer machine."),(0,i.yg)("h2",{id:"develop-the-application"},"Develop the application"),(0,i.yg)("p",null,"In the next step, we work on the actual application. You find the skeleton code in ",(0,i.yg)("inlineCode",{parentName:"p"},"/app/src/main.py")," of the Eclipse Velocitas template and thus the DevContainer."),(0,i.yg)("p",null,"Eclipse Velocitas provides the code\nto realize the described seat adjuster application.\nOne way to download the example code is to use a pre-configured task in VSCode by running the following steps:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Press F1"),(0,i.yg)("li",{parentName:"ol"},"Write ",(0,i.yg)("inlineCode",{parentName:"li"},"Tasks: Run Task")," and press enter"),(0,i.yg)("li",{parentName:"ol"},"Write ",(0,i.yg)("inlineCode",{parentName:"li"},"Import example app from SDK")," and press enter")),(0,i.yg)("p",null,"As an alternative, you can check the latest version of the seat adjuster example code\nin the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-app-python-sdk/tree/main/examples/seat-adjuster/src"},"Eclipse Velocitas SDK repository"),"\nin the Velocitas SDK directory."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"There is a chance that the latest code for the seat-adjuster example in the main-branch of the Eclipse Velocitas SDK\nis a bit different compared to the code snippets below.")),(0,i.yg)("p",null,"Let us walk through some lines of the code where the logic is in the ",(0,i.yg)("inlineCode",{parentName:"p"},"vapp.py")," while the entry point is in ",(0,i.yg)("inlineCode",{parentName:"p"},"main.py"),"."),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"on_start(self)")," function we subscribe to any changes of the current value of the VSS signal ",(0,i.yg)("inlineCode",{parentName:"p"},"Vehicle.Cabin.Seat.Row1.Pos1.Position")," in the KUKSA Databroker."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'async def on_start(self):\n        """Run when the vehicle app starts"""\n        await self.Vehicle.Cabin.Seat.Row1.Pos1.Position.subscribe(\n            self.on_seat_position_changed\n        )\n')),(0,i.yg)("p",null,"When the seat position changes, the ",(0,i.yg)("inlineCode",{parentName:"p"},"on_seat_position_changed")," function is triggered and publishes the new seat position value as MQTT-message to the topic ",(0,i.yg)("inlineCode",{parentName:"p"},"seatadjuster/currentPosition"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},' async def on_seat_position_changed(self, data: DataPointReply):\n        response_topic = "seatadjuster/currentPosition"\n        await self.publish_event(\n            response_topic,\n            json.dumps(\n                {"position": data.get(self.Vehicle.Cabin.Seat.Row1.Pos1.Position).value}\n            ),\n        )\n')),(0,i.yg)("p",null,"In addition, we have the function ",(0,i.yg)("inlineCode",{parentName:"p"},"on_set_position_request_received")," which is triggered for every MQTT-message to the topic ",(0,i.yg)("inlineCode",{parentName:"p"},"seatadjuster/setPosition/request"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},' @subscribe_topic("seatadjuster/setPosition/request")\n    async def on_set_position_request_received(self, data_str: str) -> None:\n        data = json.loads(data_str)\n        (...)\n        vehicle_speed = (await self.Vehicle.Speed.get()).value\n\n        position = data["position"]\n        if vehicle_speed == 0:\n                try:\n                    await self.Vehicle.Cabin.Seat.Row1.Pos1.Position.set(position)\n        (...)\n')),(0,i.yg)("p",null,"If the vehicle speed is zero, meaning that the vehicle does not move, we set the target value in the KUKSA Databroker for the position signal of the seat\nto the value requested in the incoming MQTT message."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"get()")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"set()")," functions are created based on a VSS model, and we assume that the KUKSA Databroker instance uses the same VSS model.\nIn many cases, like the default Eclipse Leda, one may rely on the upstream VSS model, but some scenarios require further signals, e.g., by applying an overlay."),(0,i.yg)("p",null,"You can configure the used VSS model in the ",(0,i.yg)("inlineCode",{parentName:"p"},"app/AppManifest.json")," file. This file includes an interface definition with the entry for the default ",(0,i.yg)("inlineCode",{parentName:"p"},"vehicle_signal_interface"),".\nThe VSS signals in this guide are part of VSS in version 3.0.0.\nThe DevContainer generates the respective Eclipse Velocitas SDK based on this configuration.\nFor more details see the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/vehicle-model-generator"},"Eclipse Velocitas Model Generator"),"."),(0,i.yg)("p",null,"At this point, you may wonder how the application actually knows to which MQTT broker to connect and where to find the correct instance of the KUKSA Databroker.\nThis service discovery is abstracted within the Velocitas SDK and involves the usage of so-called middleware to find and call the other components.\nAs of writing this page, Eclipse Velocitas supports DAPR as middleware or uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"native")," approach to configure the correct address directly.\nThe details of how to set and configure the used middleware are part of the ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/deploy-seat-adjuster"},"deployment"),"."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("em",{parentName:"p"},"Signal Description:")," The signal indicates the seat position on the vehicle x-axis, where the value 0 is the frontmost position supported by the seat.")),(0,i.yg)("p",null,"The value is the ",(0,i.yg)("em",{parentName:"p"},"distance measured in millimeters"),"."),(0,i.yg)("p",null,"The example implementation supports values between ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"1000")," millimeters."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("em",{parentName:"p"},"Note:")," This range of valid values is not reflected in the standard Vehicle Signal Specification. OEMs would overlay the VSS tree with actual Min/Max values,\ndepending on the seat hardware available in the vehicle model.")),(0,i.yg)("h2",{id:"start-runtime-in-devcontainer-to-test-application"},"Start Runtime in DevContainer to test application"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"You may skip the application testing since we already provide the example code.\nBut it still makes sense to get a general idea of how to test and debug the code with the tooling in the DevContainer.")),(0,i.yg)("p",null,"As mentioned before, the execution and, thus, the testing of the application requires a set of other components to be available\nlike the KUKSA Databroker or an MQTT-broker.\nFurthermore, the deployment, the configuration, and the behavior of the application may change depending on the used container management solution.\nTherefore, Eclipse Velocitas allows the deployment of the required components and the application with the container management approach of choice inside the DevContainer and refers to this as runtime."),(0,i.yg)("p",null,"The different runtimes are maintained in ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/devenv-runtimes"},"a separate Eclipse Velocitas repository"),".\nWe use the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/cli"},"Eclipse Velocitas CLI")," to start the local runtime first:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"velocitas exec runtime-local up\n")),(0,i.yg)("p",null,"The local runtime allows you to debug your Python vehicle app code, which is the reason to use this runtime during debugging.\nLater, e.g., when you want to run your app in a similar environment as it would run on the target environment, like Eclipse Leda, we can use the respective runtime as explained below in ",(0,i.yg)("a",{parentName:"p",href:"#kanto-runtime"},"Kanto Runtime"),":"),(0,i.yg)("p",null,"To ",(0,i.yg)("a",{parentName:"p",href:"https://eclipse.dev/velocitas/docs/tutorials/quickstart/quickstart/#how-to-debug-your-_vehicle-app_"},"debug")," your app you can use the Python debugger of VSCode.\nAs an initial step, you need to set a breakpoint at the location of interest by clicking next to the line number. To then start a debug session, press ",(0,i.yg)("inlineCode",{parentName:"p"},"F5"),".\nIn the case of the Seat Adjuster application, we can debug the function ",(0,i.yg)("inlineCode",{parentName:"p"},"on_set_position_request_received")," by placing a breakpoint inside the function.\nTo trigger the execution of this function, send and receive MQTT messages with the VSMQTT plugin through the pre-configured local configuration (",(0,i.yg)("inlineCode",{parentName:"p"},"mosquitto (local)"),").\nYou find the plugin with a cloud icon in the left side of the VSCode instance connected to the DevContainer."),(0,i.yg)("p",null,"Here, you can publish a message on the topic:"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},'"seatadjuster/setPosition/request"')),(0,i.yg)("p",null,", to which the function registers itself.\nAfter sending the message to the topic, the debugger should be activated and the editor should open to step through your code."),(0,i.yg)("p",null,"When you complete your debugging session, you can also ",(0,i.yg)("a",{parentName:"p",href:"https://eclipse.dev/velocitas/docs/tutorials/quickstart/quickstart/#how-to-start-the-runtime-services"},"close the local environment")," by pressing ",(0,i.yg)("inlineCode",{parentName:"p"},"Ctrl + C")," in the terminal in which you started the local runtime."),(0,i.yg)("h3",{id:"kanto-runtime"},"Kanto Runtime"),(0,i.yg)("p",null,"To run your application within a container in Eclipse Kanto locally, simply use the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/eclipse-velocitas/cli"},"Eclipse Velocitas CLI"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"velocitas exec runtime-kanto up\n")),(0,i.yg)("p",null,"Once the runtime is available, we add our application by executing:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"velocitas exec deployment-kanto build-vehicleapp\nvelocitas exec deployment-kanto deploy-vehicleapp\n")),(0,i.yg)("p",null,"You can now test the application by interacting with it through the MQTT broker from the Eclipse Kanto runtime.\nWe do not get into details for the topics and messages here since we will run the application in Eclipse Leda again later in this guide."),(0,i.yg)("p",null,"Once you finish the application testing and development, you can shutdown the runtime with:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"velocitas exec runtime-kanto down\n")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Eclipse Velocitas provides Tasks to abstract the mentioned calls of the ",(0,i.yg)("inlineCode",{parentName:"p"},"velocitas")," CLI. As an alternative you can thus press ",(0,i.yg)("inlineCode",{parentName:"p"},"F1")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Run Task"),"\nand scroll for the respective task like ",(0,i.yg)("inlineCode",{parentName:"p"},"Kanto runtime Up"),".")),(0,i.yg)("h2",{id:"commit-and-release-application"},"Commit and Release Application"),(0,i.yg)("p",null,"When you are confident about the application, you want to be able to distribute it.\nHere, pre-configured workflows from Eclipse Velocitas for GitHub Actions are helpful."),(0,i.yg)("p",null,"You now commit your changes and push them to your copy of the Eclipse Velocitas template repository in GitHub.\nBefore you create the commit, we recommend running the pre-commit task, which performs similar checks and linting as the CI workflow from Eclipse Velocitas.\nYou can trigger the pre-commit as a task in VSCode:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Press F1"),(0,i.yg)("li",{parentName:"ol"},"Write ",(0,i.yg)("inlineCode",{parentName:"li"},"Tasks: Run Task")," and press enter"),(0,i.yg)("li",{parentName:"ol"},"Write ",(0,i.yg)("inlineCode",{parentName:"li"},"Pre Commit Action")," and press enter")),(0,i.yg)("p",null,"The pre commit action should start in a terminal inside VSCode."),(0,i.yg)("p",null,"You can check the available tasks configured by Eclipse Velocitas in ",(0,i.yg)("inlineCode",{parentName:"p"},".vscode/tasks.json"),"."),(0,i.yg)("p",null,"If the pre-commit was successful, you may push your changes and open the repository in the browser.\nIn the meantime, the push should trigger the ",(0,i.yg)("inlineCode",{parentName:"p"},"CI workflow")," and the ",(0,i.yg)("inlineCode",{parentName:"p"},"Build multiarch image")," workflow, which you can track in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Actions")," tab."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"If you set your copy of the template repository to private, the ",(0,i.yg)("inlineCode",{parentName:"p"},"CI workflow")," may fail due to missing permissions to write container images to GitHub packages.\nYou can grant more ",(0,i.yg)("inlineCode",{parentName:"p"},"Workflow permissions")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Settings")," tab of the repository under ",(0,i.yg)("inlineCode",{parentName:"p"},"Actions"),"-> ",(0,i.yg)("inlineCode",{parentName:"p"},"General"),".")),(0,i.yg)("p",null,"To deploy your application to a target and if the two workflows have finished successfully, you can perform a release in GitHub.\nThe subsequent release workflow will make the application available as a built container in the container registry of GitHub (",(0,i.yg)("inlineCode",{parentName:"p"},"Code")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Packages"),").\nTo do the release in GitHub, go to the ",(0,i.yg)("inlineCode",{parentName:"p"},"Code")," tab and click ",(0,i.yg)("inlineCode",{parentName:"p"},"Releases")," on the right side of the page.\nThen you can ",(0,i.yg)("inlineCode",{parentName:"p"},"Draft a new release"),", create a new tag and title for the release, and click ",(0,i.yg)("inlineCode",{parentName:"p"},"Publish Release"),", which triggers the ",(0,i.yg)("inlineCode",{parentName:"p"},"Release workflow"),"."),(0,i.yg)("p",null,"The next step is to ",(0,i.yg)("a",{parentName:"p",href:"/docs/companion-application/deploy-seat-adjuster"},"deploy the seat adjuster in Eclipse Leda")))}u.isMDXComponent=!0}}]);