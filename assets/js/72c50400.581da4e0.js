"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[292],{5788:(e,t,n)=>{n.d(t,{Iu:()=>p,yg:()=>m});var a=n(1504);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3256:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(5072),r=(n(1504),n(5788));const i={},o="Architecture of Companion Application",s={unversionedId:"companion-application/architecture-seat-adjuster",id:"companion-application/architecture-seat-adjuster",title:"Architecture of Companion Application",description:"The seat adjuster application interacts with the vehicle through a Vehicle Abstraction Layer created by the KUKSA Databroker,",source:"@site/docs/companion-application/architecture-seat-adjuster.md",sourceDirName:"companion-application",slug:"/companion-application/architecture-seat-adjuster",permalink:"/docs/companion-application/architecture-seat-adjuster",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"overallSidebar",previous:{title:"Companion Application Blueprint",permalink:"/docs/companion-application/"},next:{title:"Develop Application",permalink:"/docs/companion-application/develop-seat-adjuster"}},c={},l=[{value:"Getting Seat Position",id:"getting-seat-position",level:2}],p={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.c)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"architecture-of-companion-application"},"Architecture of Companion Application"),(0,r.yg)("p",null,"The seat adjuster application interacts with the vehicle through a ",(0,r.yg)("em",{parentName:"p"},"Vehicle Abstraction Layer")," created by the KUKSA Databroker,\nwhich uses the ",(0,r.yg)("a",{parentName:"p",href:"https://covesa.github.io/vehicle_signal_specification/"},"Vehicle Signal Specification (VSS)"),"\nto express the current value and in case of actuators also the desired state of the vehicle signal.\nBy developing against the abstraction layer, the application becomes independent from the actual physical seat."),(0,r.yg)("p",null,"To control the position of the driver seat, the seat adjuster sets the target value of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Vehicle.Cabin.Seat.Row1.Pos1.Position")," signal in the KUKSA Databroker."),(0,r.yg)("p",null,"The architecture assumes so-called actuation providers that apply the changes to the actual vehicle as indicated in the target value, e.g.,\nthrough interaction with the responsible ECUs.\nFor this tutorial, we do not expect you to interface with an actual vehicle and thus abstract the vehicle by using the Kuksa.Val vehicle mock service.\nThis vehicle mock service allows the definition of behavior toward the KUKSA Databroker like we would expect from the vehicle, for example,\nsetting the current value after reacting to changes to the target value of a signal."),(0,r.yg)("mermaid",{value:'flowchart TB\n    client[Client]\n    anotherClient[Another Client]\n    seatadjuster[Seat Adjuster]\n    databroker[(KUKSA<br>Databroker)]\n    mqttRequest[[MQTT topic<br>seatadjuster/setPosition/request]]\n    mockservice[Provider: Mock Service]\n\n    client -- "JSON Request: position, requestId" --\x3e mqttRequest\n    anotherClient -.-> mqttRequest\n    mqttRequest --\x3e seatadjuster\n    seatadjuster -- "Set Target<br>Vehicle.Cabin.Seat.Row1.Pos1.Position<br>gRPC" --\x3e databroker\n    databroker <-- "Set Current<br>Vehicle.Cabin.Seat.Row1.Pos1.Position<br><br>Notify subscriber of changed target<br>Vehicle.Cabin.Seat.Row1.Pos1.Position" --\x3e mockservice'}),(0,r.yg)("p",null,"As interface to the user, we assume a ",(0,r.yg)("strong",{parentName:"p"},"client")," that can, for example, be a local app in the infotainment domain with a user interface\nor an off-board application sending the request from a backend.\nEither way, the client controls our seat adjuster application through a JSON encoded message over MQTT using the topic ",(0,r.yg)("inlineCode",{parentName:"p"},"setPosition/request"),"."),(0,r.yg)("p",null,"An example request looks like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'mosquitto_pub -t seatadjuster/setPosition/request \n    -m \'{"position": 1000, "requestId": "12345"}\'\n')),(0,r.yg)("p",null,"The position parameter can be any value between 0 and 1000."),(0,r.yg)("h2",{id:"getting-seat-position"},"Getting Seat Position"),(0,r.yg)("p",null,"When the seat moves, the provider gets this information, for example, from the seat ECU over the CAN-bus.\nWe use the mock service as a provider and configure it to set the current value for the ",(0,r.yg)("inlineCode",{parentName:"p"},"Vehicle.Cabin.Seat.Row1.Pos1.Position")," signal in the KUKSA Databroker\nafter the target value for the signal changes."),(0,r.yg)("p",null,"To receive the changes to the seat position, the seat adjuster application already subscribed to the current value of the signals and thus gets notified.\nAs a result, the seat adjuster constructs a JSON message and sends the new seat position to the MQTT-topic ",(0,r.yg)("inlineCode",{parentName:"p"},"seatadjuster/currentPosition"),"\nwhere any client can consume it."),(0,r.yg)("p",null,"The seat adjuster also sends responses to each request received at the MQTT-topic ",(0,r.yg)("inlineCode",{parentName:"p"},"seatadjuster/request")," with a message to the MQTT-topic ",(0,r.yg)("inlineCode",{parentName:"p"},"seatadjuster/response"),"\nindicating whether it accepted the incoming request and set the target value or whether there was an error like the vehicle currently moving."),(0,r.yg)("mermaid",{value:'flowchart TD\n    client[Client]\n    anotherClient[Another Client]\n    seatadjuster[Seat Adjuster]\n    databroker[(KUKSA<br>Databroker)]\n    mqttResponse[[MQTT topic<br>seatadjuster/setPosition/response]]\n    mqttCurrent[[MQTT topic<br>seatadjuster/currentPosition]]\n    mockservice[Provider: Mock Service]\n\n    mockservice -- "Feed/Set<br>Vehicle.Cabin.Seat.Row1.Pos1.Position<br>(Sensor)" --\x3e databroker\n    databroker -- "Notify Subscriber<br>Vehicle.Cabin.Seat.Row1.Pos1.Position" --\x3e seatadjuster\n    seatadjuster -- "Once after processing<br>/setPosition/request<br>message" --\x3e mqttResponse\n    seatadjuster -- "While seat is moving" --\x3e mqttCurrent\n    mqttResponse -- "SetPosition Response<br>(Accepted / Error)" --\x3e client\n    mqttCurrent --\x3e client\n\n    mqttCurrent -.-> anotherClient\n    mqttResponse -.-> anotherClient'}),(0,r.yg)("p",null,"The next step is to ",(0,r.yg)("a",{parentName:"p",href:"/docs/companion-application/develop-seat-adjuster"},"develop the seat adjuster with the help of Eclipse Velocitas"),"."))}h.isMDXComponent=!0}}]);