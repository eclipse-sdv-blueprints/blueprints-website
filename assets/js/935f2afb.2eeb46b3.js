"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[696],{5988:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"overallSidebar":[{"type":"category","label":"Blueprints Documentation","items":[{"type":"category","label":"Companion Application","items":[{"type":"link","label":"Architecture of Companion Application","href":"/docs/companion-application/architecture-seat-adjuster","docId":"companion-application/architecture-seat-adjuster"},{"type":"link","label":"Develop Application","href":"/docs/companion-application/develop-seat-adjuster","docId":"companion-application/develop-seat-adjuster"},{"type":"link","label":"Deploy Application","href":"/docs/companion-application/deploy-seat-adjuster","docId":"companion-application/deploy-seat-adjuster"},{"type":"link","label":"Interact with Seat Adjuster","href":"/docs/companion-application/interact-seat-adjuster","docId":"companion-application/interact-seat-adjuster"},{"type":"link","label":"Troubleshooting","href":"/docs/companion-application/troubleshooting","docId":"companion-application/troubleshooting"}],"collapsed":true,"collapsible":true,"href":"/docs/companion-application/"},{"type":"link","label":"Fleet Management","href":"/docs/fleet-management/introduction","docId":"fleet-management/introduction"},{"type":"category","label":"Service to Signal","items":[{"type":"link","label":"Horn Service Kuksa","href":"/docs/service-to-signal/components/horn-service-kuksa/","docId":"service-to-signal/components/horn-service-kuksa/README"},{"type":"link","label":"Horn Client","href":"/docs/service-to-signal/components/horn-client/","docId":"service-to-signal/components/horn-client/README"},{"type":"link","label":"Actuator Provider","href":"/docs/service-to-signal/components/actuator-provider/","docId":"service-to-signal/components/actuator-provider/README"}],"collapsed":true,"collapsible":true,"href":"/docs/service-to-signal/"}],"collapsed":true,"collapsible":true,"href":"/docs/overview"}]},"docs":{"companion-application/architecture-seat-adjuster":{"id":"companion-application/architecture-seat-adjuster","title":"Architecture of Companion Application","description":"The seat adjuster application interacts with the vehicle through a Vehicle Abstraction Layer created by the KUKSA Databroker,","sidebar":"overallSidebar"},"companion-application/deploy-seat-adjuster":{"id":"companion-application/deploy-seat-adjuster","title":"Deploy Application","description":"We now want to deploy the application to a target device.","sidebar":"overallSidebar"},"companion-application/develop-seat-adjuster":{"id":"companion-application/develop-seat-adjuster","title":"Develop Application","description":"After we established the architecture of what we want to build, it is time to develop the application with the help of the Eclipse Velocitas DevContainer and templates.","sidebar":"overallSidebar"},"companion-application/interact-seat-adjuster":{"id":"companion-application/interact-seat-adjuster","title":"Interact with Seat Adjuster","description":"We interact with the seat application through MQTT messages to emulate the behavior of an offboard application.","sidebar":"overallSidebar"},"companion-application/Readme":{"id":"companion-application/Readme","title":"Companion Application Blueprint","description":"The companion application is an example to","sidebar":"overallSidebar"},"companion-application/troubleshooting":{"id":"companion-application/troubleshooting","title":"Troubleshooting","description":"There are a few issues that you might run into when setting up the companion application. We collected them here, along with hints on how to resolve them. If you run into another problem that is not listed here, we welcome you to create an issue in the respective repository.","sidebar":"overallSidebar"},"fleet-management/introduction":{"id":"fleet-management/introduction","title":"Introduction","description":"Fleet Management","sidebar":"overallSidebar"},"service-to-signal/components/actuator-provider/README":{"id":"service-to-signal/components/actuator-provider/README","title":"Actuator Provider","description":"Prerequisites","sidebar":"overallSidebar"},"service-to-signal/components/horn-client/README":{"id":"service-to-signal/components/horn-client/README","title":"Horn Client","description":"The Horn Client package implements a Client for the Horn service over Eclipse uProtocol from the COVESA uServices. This implementation relies on Eclipse Zenoh for the transport layer of the Eclipse uProtocol communication.","sidebar":"overallSidebar"},"service-to-signal/components/horn-service-kuksa/README":{"id":"service-to-signal/components/horn-service-kuksa/README","title":"Horn Service Kuksa","description":"This component implements the COVEAS uService for the Horn. It uses the Zenoh transport for Eclipse uProtocol. To start the service simply run:","sidebar":"overallSidebar"},"service-to-signal/README":{"id":"service-to-signal/README","title":"service-to-signal-blueprint","description":"In this Service-To-Signal Blueprint we show how one can implement a service over Eclipse uProtocol where the interface definition is part of the COVESA uServices. We use the Rust implementation of the Eclipse Zenoh transport of Eclipse uProtocol. The service implementation further relies on the interaction with VSS Signals, brokered in an Eclipse Kuksa Databroker.","sidebar":"overallSidebar"}}}')}}]);