"use strict";(self.webpackChunkblueprints_website=self.webpackChunkblueprints_website||[]).push([[340],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,r[1]=p;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const i={},r="Companion Application Blueprint",p={unversionedId:"companion-application/Readme",id:"companion-application/Readme",title:"Companion Application Blueprint",description:"The companion application is an example to",source:"@site/docs/companion-application/Readme.md",sourceDirName:"companion-application",slug:"/companion-application/",permalink:"/docs/companion-application/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"overallSidebar",previous:{title:"Blueprints Documentation",permalink:"/docs/overview"},next:{title:"Architecture of Companion Application",permalink:"/docs/companion-application/architecture-seat-adjuster"}},l={},c=[{value:"Description",id:"description",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,a.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"companion-application-blueprint"},"Companion Application Blueprint"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"companion application")," is an example to\nshowcase how to create a vehicle application which senses and actuates signals in the vehicle\nfor Eclipse Leda with help of Eclipse Velocitas and Eclipse Kuksa\n. The aim is not to build the best available application possible but to show how one can use the applied technologies\nto build a companion app for the interaction with a vehicle, e.g., to move a seat.\nIf you are new to the concepts around Eclipse SDV and the mentioned projects\nwe recommend to read the ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-leda.github.io/leda/docs/general-usage/sdv-introduction/"},"SDV Tutorial")," first."),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"The idea of the specific companion application introduced in this blueprint is to have a custom application to move the driver seat to positions defined\nin a driver profile hosted by a third-party web service."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Leda Seat Adjuster Use Case",src:n(8566).Z,width:"521",height:"215"})),(0,o.kt)("p",null,"The setup contains the following components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Cloud or mobile trigger: not part of the Leda image, but we simulate it by issuing MQTT messages"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Seat Adjuster")," : Developed with Eclipse Velocitas to be deployed by user"),(0,o.kt)("li",{parentName:"ul"},"Eclipse Kuksa.val - ",(0,o.kt)("strong",{parentName:"li"},"KUKSA Databroker")," (pre-installed with Eclipse Leda)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Mock Service"),": Example provider for Eclipse Kuksa.VAL which mocks the behavior of the vehicle.")),(0,o.kt)("p",null,"In the following paragraphs, we next introduce the ",(0,o.kt)("a",{parentName:"p",href:"/docs/companion-application/architecture-seat-adjuster"},"architecture and the assumed data flow"),"\nbefore we explain the ",(0,o.kt)("a",{parentName:"p",href:"/docs/companion-application/develop-seat-adjuster"},"development")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/companion-application/deploy-seat-adjuster"},"deployment")," steps.\nIf you are more interested in the general development steps, you may directly jump to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/companion-application/develop-seat-adjuster"},"develop seat adjuster"),"."))}d.isMDXComponent=!0},8566:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/seatadjuster-aaf2722e2d932ad88d9ea01346379865.png"}}]);